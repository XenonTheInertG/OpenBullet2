<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Thêm</value>
  </data>
  <data name="Added" xml:space="preserve">
    <value>Đã thêm</value>
  </data>
  <data name="AddedWordlist" xml:space="preserve">
    <value>Danh sách t.khoản đã đc thêm thành công</value>
  </data>
  <data name="AddWordlist" xml:space="preserve">
    <value>Thêm danh sách t.khoản</value>
  </data>
  <data name="AlsoDeleteFile" xml:space="preserve">
    <value>Bạn có muốn xoá file ko?</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>Bạn chắc chứ</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Thoát</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Xoá</value>
  </data>
  <data name="DeleteFileText1" xml:space="preserve">
    <value>Bạn có muốn xoá ko?</value>
  </data>
  <data name="DeleteFileText2" xml:space="preserve">
    <value>Bạn có muốn xoá trong ổ cững luôn ko</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Chỉnh sửa</value>
  </data>
  <data name="EditWordlist" xml:space="preserve">
    <value>Sửa danh sách tài khoản</value>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>Tên files</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Nó hoạt động thế nào</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Here you can import wordlists. First of all click on the %Add% button above. You will be able to specify a %Wordlist Type% (more information on this later), a %Name% and a %Purpose%. You have two options to upload your file. The first option is to %upload% it to the server that is running the instance of OpenBullet2. This is the preferred method %if the wordlist is on the client% from which you are accessing OB2 through the browser, but OB2 is being hosted on a different machine. This method of adding a wordlist adds some overhead as the wordlist needs to be uploaded through the browser.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>%If the wordlist is on the server%, which means you are trying to retrieve a file from the same machine in which OB2 is running, you can use the %File System% option, which will let you visually browse through folders in search of the file you want. Note that in order to access locations on the drive that are outside of the current working directory of OB2 you will need to go to OpenBullet's security options and allow system-wide file access.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>Regarding the %Wordlist Type%, you will find the currently specified Wordlist Types in the %UserData/Environment.ini% file in your OB2 directory. Wordlist Types are loaded when OB2 starts up. You can change this file and add/remove/change Wordlist Types to match the format of your wordlists. You can read more about Wordlist Types on the official forum's guides section.</value>
  </data>
  <data name="KeepFile" xml:space="preserve">
    <value>Ko, giữ file này lại</value>
  </data>
  <data name="Lines" xml:space="preserve">
    <value>Dòng</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Đang tải</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Tên</value>
  </data>
  <data name="NoRecordsToDisplay" xml:space="preserve">
    <value>Không có bản ghi nào để hiển thị</value>
  </data>
  <data name="NoWordlistSelected" xml:space="preserve">
    <value>Bạn cần chọn danh sách t.khoản trước</value>
  </data>
  <data name="Owner" xml:space="preserve">
    <value>Chủ sở hữu</value>
  </data>
  <data name="Purpose" xml:space="preserve">
    <value>Mục đích</value>
  </data>
  <data name="ReallyDelete" xml:space="preserve">
    <value>Bạn có thực sự muốn xoá</value>
  </data>
  <data name="results" xml:space="preserve">
    <value>kết quả</value>
  </data>
  <data name="ResultsPerPage" xml:space="preserve">
    <value>Số kết quả mỗi trang</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Loại</value>
  </data>
  <data name="Uh-Oh" xml:space="preserve">
    <value>Oh-no</value>
  </data>
  <data name="WordlistInUse" xml:space="preserve">
    <value>Danh sách tài khoản này đang được sử dụng bởi một tác vụ, vui lòng hủy bỏ hoặc xóa nó</value>
  </data>
</root>